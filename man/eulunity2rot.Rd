% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/maths_functions.R
\name{eulunity2rot}
\alias{eulunity2rot}
\title{Convert rotation in Unity Euler angles (in degrees) into 3D rotation matrix}
\usage{
eulunity2rot(rot_x, rot_y, rot_z)
}
\arguments{
\item{rot_x}{Euler x angle in degrees}

\item{rot_y}{Euler y angle in degrees}

\item{rot_z}{Euler z angle in degrees}
}
\value{
A 3D rotation matrix in left-handed coordinates
}
\description{
Converts Unity's specific (improper) Euler angles into a 3D rotation matrix for
further computations.
}
\details{
1. Unity uses (improper) Euler angles to output their internal quaternion representation.
   (https://docs.unity3d.com/2018.4/Documentation/Manual/QuaternionAndEulerRotationsInUnity.html)

2. These angles describe extrinsic rotations around the Z - X - Y coordinate axis
   (https://docs.unity3d.com/ScriptReference/Transform-eulerAngles.html)

   (also verified from Unity editor and by comparing Unity output to videos)

3. The angles are given as clockwise when the axis is pointing towards the observer
   as the coordinate system is left-handed
  (verified from Unity editor)

4. The function uses basic rotation matrices and composition of rotations
   (e.g. https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations, the matrices
   given there are for counterclockwise rotation for right-handed system;
   the same rotations produce clockwise rotation in left-handed system
}
